// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     
  name       String?
  avatarUrl  String? // optional GitHub/Gravatar avatar
  repos      Repo[]
  reviews    Review[]   // reviews made by the user
  insights   Insight?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Repo {
  id          String     @id @default(cuid())
  name        String
  description String?
  url         String     @unique
  language    String?     
  stars       Int        @default(0)
  forks       Int        @default(0)
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     String
  reviews     Review[]   
  isReviewOn Boolean    @default(false) 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Insight {
  id           String    @id @default(cuid())
  owner        User      @relation(fields: [ownerId], references: [id])
  ownerId      String    @unique
  totalPRs     Int       @default(0)
  totalReviews Int       @default(0)
  avgRating    Float?    
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  reviewId   String    @unique
  repo        Repo      @relation(fields: [repoId], references: [id])
  repoId      String
  rating      Int?      
  comment     String?   
  approved    Boolean   @default(false) // if PR was approved
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
